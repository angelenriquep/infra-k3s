name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - "kustomize/**"
      - "argocd/**"
  pull_request:
    branches: [main]
    paths:
      - "kustomize/**"
      - "argocd/**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Validation and Tests
  validate:
    runs-on: ubuntu-latest
    name: Validate Kubernetes Manifests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: "5.0.0"

      - name: Validate Kustomize builds
        run: |
          echo "üîç Validating development overlay..."
          kustomize build kustomize/overlays/development > /tmp/dev-manifest.yaml

          echo "‚úÖ Kustomize builds successful"

      - name: Validate Kubernetes YAML
        uses: instrumenta/kubeval-action@master
        with:
          files: |
            /tmp/dev-manifest.yaml
            /tmp/prod-manifest.yaml

      - name: Validate ArgoCD Applications
        run: |
          echo "üîç Validating ArgoCD applications..."
          for file in argocd/applications/*.yaml argocd/bootstrap/*.yaml; do
            if [[ -f "$file" ]]; then
              echo "Validating $file"
              # Basic YAML syntax check
              python -c "import yaml; yaml.safe_load(open('$file'))"
            fi
          done
          echo "‚úÖ ArgoCD applications valid"

  # Job 2: Security Scanning
  security:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov (Infrastructure as Code Security)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: kubernetes
          output_format: sarif
          output_file_path: reports/results.sarif
          skip_check: CKV_K8S_43,CKV_K8S_35 # Skip some checks for demo setup

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/results.sarif

  # Job 3: Generate Manifests for ArgoCD
  build-manifests:
    runs-on: ubuntu-latest
    name: Build and Validate Manifests
    needs: [validate, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Build development manifests
        run: |
          mkdir -p built-manifests/development
          kustomize build kustomize/overlays/development > built-manifests/development/all.yaml

          echo "üìä Development Manifest Stats:"
          echo "Resources: $(grep -c '^---' built-manifests/development/all.yaml)"
          echo "ConfigMaps: $(grep -c 'kind: ConfigMap' built-manifests/development/all.yaml)"
          echo "Deployments: $(grep -c 'kind: Deployment' built-manifests/development/all.yaml)"

      - name: Upload manifests as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kubernetes-manifests
          path: built-manifests/
          retention-days: 30

  # Job 4: Notify ArgoCD (opcional)
  notify-argocd:
    runs-on: ubuntu-latest
    name: Notify ArgoCD
    needs: build-manifests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Trigger ArgoCD Sync (Development)
        run: |
          echo "üöÄ Changes detected in main branch"
          echo "ArgoCD will automatically sync development environment"

          # Si tienes ArgoCD CLI configurado, puedes hacer:
          # argocd app sync api-gateway-dev

          # O webhook a ArgoCD:
          # curl -X POST "$ARGOCD_WEBHOOK_URL" \
          #   -H "Content-Type: application/json" \
          #   -d '{"revision": "${{ github.sha }}"}'

  # Job 5: Frontend Tests (opcional para el HTML)
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate HTML
        run: |
          echo "üîç Validating HTML syntax..."
          # Install HTML validator
          npm install -g html-validate

          # Validate HTML files
          if [ -f "src/frontend/index.html" ]; then
            html-validate src/frontend/index.html
            echo "‚úÖ HTML validation passed"
          fi

      - name: Test nginx config
        run: |
          echo "üîç Validating nginx configuration..."
          # Test nginx config syntax
          docker run --rm -v "$PWD/src/frontend/nginx.conf:/etc/nginx/nginx.conf:ro" \
            nginx:alpine nginx -t
          echo "‚úÖ Nginx config validation passed"
